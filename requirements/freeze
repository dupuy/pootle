#!/bin/bash
#
# Generate frozen requirements file
#
if [ "$#" -lt 2 ]; then
  echo >&2 "Usage: freeze REQUIREMENTS REQFILES..."
  exit 1
fi

set -e
trap '[ "$?" != 127 ] && echo >&2 $0: "\"$BASH_COMMAND\" failed ($?)"' ERR

REQS=.reqs
REQUIRE=$1
shift

# trap removes partial/empty target on failure
settrap() { trap 'if [ "$?" != 0 ]; then rm -f $REQUIRE; fi' 0; }

MSG="# Generated by 'make ${REQUIRE##*/}' from requirements/$*"

case `pip --version` in
  "pip 0"*|"pip 1.[012]"*)
    mkdir -p $REQS
    virtualenv --no-site-packages --clear $REQS/env
    source $REQS/env/bin/activate
    echo "starting clean install of requirements from PyPI (please be patient)"
    while [ "$#" -gt 0 ]; do
      # run each line of input file in separate pip command for progress
      sed 's/#.*//' $1 | xargs -n 1 -t \
        pip install --download-cache $REQS |
       egrep -v 'warning:|previously-included'
      shift
    done
    settrap
    { echo $MSG
      pip freeze | LC_ALL=C sort |
       egrep -v "@`git rev-parse HEAD`|^wsgiref=="; } > $REQUIRE ;;
  *)
    # only pip 1.3.1+ processes --download recursively
    mkdir $REQS 2>/dev/null ||
     find $REQS -type f ! -name '*%*' | xargs rm -f	# preserve cache only

    echo "starting download of requirements from PyPI (please be patient)"
    E=
    while [ "$#" -gt 0 ]; do
      E="$E`grep '^-e' $1 || true`"
      # run each line of input file in separate pip command for progress
      sed 's/#.*//' $1 | xargs -n 1 -t \
        pip install --download-cache $REQS --download $REQS |
       egrep -v 'warning:|previously-included'
      shift
    done
    settrap
    (cd $REQS &&
     { echo $MSG
       printf '%s' "$E" | LC_ALL=C sort
       ls *.tar* | sed -e '/%/d' -e 's/-\([0-9]\)/==\1/' -e 's/.tar.*$//' |
       LC_ALL=C sort; }
    ) > $REQUIRE ;;
esac
