.PHONY: all help requirements requirements.txt

all: requirements

help:
	@echo "Help"
	@echo "----"
	@echo
	@echo "  requirements - (re)generate pinned and minimum requirements"

REQS=.reqs
REQUIRE=../requirements.txt
REQFILE=base.txt
MINVERS=MINVERS.txt

# Perform forced build using -W for the (.PHONY) requirements target
requirements:
	$(MAKE) -W $(REQFILE) $(MINVERS) $(REQUIRE)

$(notdir $(REQUIRE)): $(REQUIRE)
requirements/%: %
	@echo "make: '$@' is up to date."

$(REQUIRE): $(REQFILE)
	@set -e;							 \
	 MSG="# Generated by 'make $(@F)' from requirements/$(REQFILE)"; \
	 case `pip --version` in					 \
	   "pip 0"*|"pip 1.[012]"*)					 \
	     virtualenv --no-site-packages --clear $(REQS);		 \
	     source $(REQS)/bin/activate;				 \
	     echo starting clean install of requirements from PyPI;	 \
	     pip install --use-mirrors -r $(REQFILE);			 \
	     : trap removes partial/empty target on failure;		 \
	     trap 'if [ "$$?" != 0 ]; then rm -f $@; fi' 0;		 \
	     { echo $$MSG;						 \
	       pip freeze | sort | grep -v '^wsgiref=='; } > $@ ;;	 \
	   *)								 \
	     : only pip 1.3.1+ processes --download recursively;	 \
	     rm -rf $(REQS); mkdir $(REQS);				 \
	     echo starting download of requirements from PyPI;		 \
	     pip install --download $(REQS) -r $(REQFILE);		 \
	     : trap removes partial/empty target on failure;		 \
	     trap 'if [ "$$?" != 0 ]; then rm -f $@; fi' 0;		 \
	     (cd $(REQS) && { echo $$MSG; ls *.tar* |			 \
	      sed -e 's/-\([0-9]\)/==\1/' -e 's/\.tar.*$$//'; } ) > $@;	 \
	 esac; 

$(MINVERS): [a-z]*.txt
	@if grep -q '>[0-9]' $^; then				\
	   echo "Use '>=' not '>' for requirements"; exit 1;	\
	 fi
	@echo "creating $@"
	@set -e;							 \
	 MSG="`echo \"Generated by 'make requirements' from $^\" | fmt | \
	       sed 's/^/# /'`";						 \
	 : trap removes partial/empty target on failure;		 \
	 trap 'if [ "$$?" != 0 ]; then rm -f $@; fi' 0;			 \
	 { echo "$$MSG"; cat $^ |					 \
	   sed -n -e '/#egg/d' -e '/=/{s/>=/==/;s/,*<.*//;p;}'; } > $@
